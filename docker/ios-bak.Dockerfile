# cocoapods
RUN apt-get -y update && apt-get install -y ruby-dev
RUN gem install -n /usr/local/bin cocoapods
RUN su - "buildkite-agent" -c "pod repo add cocoapods https://github.com/CocoaPods/Specs.git"

# clang
# https://stackoverflow.com/questions/28085052/compile-ios-program-from-linux-commandline
# https://heroims.github.io/2017/09/10/Linux%20%E6%9E%84%E5%BB%BA:%E7%BC%96%E8%AF%91IOS:Mac%E7%A8%8B%E5%BA%8F/
# http://wiki.li3huo.com/xcbuild_on_centos
ARG CLANG_VERSION=4.0
RUN apt-get update -y && apt-get install -y git gcc cmake libssl-dev libtool autoconf automake \
     libxml2-dev clang-${CLANG_VERSION}

RUN ln -s /usr/bin/clang-${CLANG_VERSION} /usr/bin/clang && \
    ln -s /usr/bin/clang++-${CLANG_VERSION} /usr/bin/clang++

ARG IOS_VERSION=13.2
# ARG IPHONEOS_DEPLOYMENT_TARGET=8.0
COPY osx/iPhoneOS${IOS_VERSION}.sdk.tar.gz /
RUN git clone https://github.com/tpoechtrager/cctools-port.git

# ARMv7
RUN cctools-port/usage_examples/ios_toolchain/build.sh /iPhoneOS${IOS_VERSION}.sdk.tar.gz armv7
RUN mv cctools-port/usage_examples/ios_toolchain/target /usr/local/ios-armv7 && \
    cp /usr/local/ios-armv7/lib/libtapi.so /usr/lib
ENV PATH $PATH:/usr/local/ios-armv7/bin

# ARM64
RUN /cctools-port/usage_examples/ios_toolchain/build.sh /iPhoneOS${IOS_VERSION}.sdk.tar.gz arm64
RUT apt-get install rename
RUN mv cctools-port/usage_examples/ios_toolchain/target /usr/local/ios-arm64 && \
    rename 's/arm-/aarch64-/' /usr/local/ios-arm64/bin/* && \
    rm /usr/local/ios-arm64/aarch64-apple-darwin11-clang++ && \
    ln -s /usr/local/ios-arm64/aarch64-apple-darwin11-clang /usr/local/ios-arm64/aarch64-apple-darwin11-clang++

# RUN wget http://llvm.org/releases/4.0.1/llvm-4.0.1.src.tar.xz && \
#     tar xf llvm-4.0.1.src.tar.xz && \
#     mv llvm-4.0.1.src llvm

# RUN cd llvm/tools && \
#     wget http://llvm.org/releases/4.0.1/cfe-4.0.1.src.tar.xz && \
#     tar xf cfe-4.0.1.src.tar.xz && \
#     mv cfe-4.0.1.src clang

# RUN cd llvm/tools/clang/tools && \
#     wget http://llvm.org/releases/4.0.1/clang-tools-extra-4.0.1.src.tar.xz && \
#     tar xf clang-tools-extra-4.0.1.src.tar.xz && \
#     mv clang-tools-extra-4.0.1.src  extra

# RUN cd llvm/projects && \
#     wget http://llvm.org/releases/4.0.1/compiler-rt-4.0.1.src.tar.xz && \
#     tar xf compiler-rt-4.0.1.src.tar.xz && \
#     mv compiler-rt-4.0.1.src compiler-rt

# RUN mkdir llvmbuild && \
#     cd llvmbuild && \
#     #–prefix=directory — 设置llvm编译的安装路径(default/usr/local).
#     #–enable-optimized — 是否选择优化(defaultis NO)，yes是指安装一个Release版本.
#     #–enable-assertions — 是否断言检查(default is YES).
#     # ../llvm/configure --enable-optimized --enable-targets=host-only --prefix=/usr/bin && \
#     cmake ../llvm && \
#     make && \
#     make install && \
#     cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/bin -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_FFI=ON -DLLVM_BUILD_LLVM_DYLIB=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLLVM_TARGETS_TO_BUILD="host" -Wno-dev ../llvm && \
#     ninja -j4 && \
#     ninja install

# OSXCross
# https://github.com/tpoechtrager/osxcross
# The SDK version must exist at docker/osx/, and can be generated by running tools/gen_sdk_package.sh
# ARG OSXCROSS_SDK_VERSION=10.15
# RUN SDK_VERSION=$OSXCROSS_SDK_VERSION                           \
#     mkdir /usr/osxcross &&                                      \
#     cd /usr &&                                                  \
#     git clone https://github.com/tpoechtrager/osxcross.git

# COPY osx/MacOSX${OSXCROSS_SDK_VERSION}.sdk.tar.xz /usr/osxcross/tarballs

# RUN cd /usr/osxcross && UNATTENDED=1  PORTABLE=true ./build.sh

# # LLVM
# # https://github.com/apriorit/docker-osxcross-10.11/blob/master/Dockerfile
# # RUN bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
# RUN apt-get install -y llvm
# RUN /usr/osxcross/build_compiler_rt.sh

# ENV PATH $PATH:/usr/osxcross/target/bin

# xcbuild
RUN apt-get update -y && apt-get install -y git cmake ninja-build libpng-dev zlib1g-dev pkg-config
RUN git clone https://github.com/facebook/xcbuild && \
  cd xcbuild && git submodule update --init && \
  make && cp -a build/. /usr/bin/

# ENV LD_LIBRARY_PATH /usr/osxcross/lib:$LD_LIBRARY_PATH
ENV DEVELOPER_DIR /Xcode
# ENV TOOLCHAINS /usr/osxcross/target

# RUN apt install -y cmake clang bison flex libfuse-dev libudev-dev pkg-config libc6-dev-i386 linux-headers-generic gcc-multilib libcairo2-dev libgl1-mesa-dev libtiff5-dev libfreetype6-dev git libelf-dev libxml2-dev libegl1-mesa-dev libfontconfig1-dev libbsd-dev
# RUN git clone --recursive https://github.com/darlinghq/darling.git
# RUN cd darling && mkdir build && cd build && \
#     cmake .. && make && make install && \
#     make lkm && make lkm_install

# RUN find / -name '*Toolchains*'
# /usr/share/cmake-3.10/Help/manual/cmake-toolchains.7.rst
# /usr/osxcross/tools/toolchain.cmake
# /usr/osxcross/build/apple-libtapi/

# RUN xcbuild && exit 1
